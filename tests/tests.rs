extern crate cbindgen;

use std::path::Path;
use cbindgen::*;

fn run_cbindgen(path: &Path, output: &Path, language: Language, style: Option<Style>) {
    unimplemented!()
}

fn run_compile_test(path: &Path, language: Language, style: Option<Style>) {
    unimplemented!()
}

fn test_file(filename: &'static str) {
    let test = Path::new(filename);
    for style in &[Style::Type, Style::Tag, Style::Both] {
        run_compile_test(&test, Language::C, Some(style.clone()));
    }
    run_compile_test(&test, Language::Cxx, None);
}

macro_rules! test_file {
    ($name:ident, $file:tt) => {
        #[test]
        fn $name() {
            test_file($file);
        }
    }
}

// This file is generated by build.rs
include!(concat!(env!("OUT_DIR"), "/tests.rs"));
